diff --git a/deps/lgw1302/V2.1.0-corecell.patch b/deps/lgw1302/V2.1.0-corecell.patch
index f212880..f48adb8 100644
--- a/deps/lgw1302/V2.1.0-corecell.patch
+++ b/deps/lgw1302/V2.1.0-corecell.patch
@@ -22,6 +22,22 @@ index 6e153a3..45981b5 100644
  
  /* radio-specific parameters */
  #define LGW_XTAL_FREQU      32000000            /* frequency of the RF reference oscillator */
+diff --git a/libloragw/inc/loragw_mcu.h b/libloragw/inc/loragw_mcu.h
+index 0d0588f..c81d2e7 100644
+--- a/libloragw/inc/loragw_mcu.h
++++ b/libloragw/inc/loragw_mcu.h
+@@ -190,6 +190,11 @@ int mcu_spi_store(uint8_t * in_out_buf, size_t buf_size);
+ */
+ int mcu_spi_flush(int fd);
+ 
++/**
++ *
++*/
++void mcu_save_version(char * version);
++
+ #endif
+ 
+ /* --- EOF ------------------------------------------------------------------ */
 diff --git a/libloragw/inc/loragw_spi.h b/libloragw/inc/loragw_spi.h
 index 88e4530..1b83698 100644
 --- a/libloragw/inc/loragw_spi.h
@@ -275,7 +291,7 @@ index 9a81a08..2314e32 100644
  }
 +#endif
 diff --git a/libloragw/src/loragw_hal.c b/libloragw/src/loragw_hal.c
-index ffc8ec0..60e8387 100644
+index ffc8ec0..0963480 100644
 --- a/libloragw/src/loragw_hal.c
 +++ b/libloragw/src/loragw_hal.c
 @@ -69,6 +69,8 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
@@ -287,7 +303,18 @@ index ffc8ec0..60e8387 100644
  #define TRACE()             fprintf(stderr, "@ %s %d\n", __FUNCTION__, __LINE__);
  
  #define CONTEXT_STARTED         lgw_context.is_started
-@@ -277,7 +279,7 @@ static int remove_pkt(struct lgw_pkt_rx_s * p, uint8_t * nb_pkt, uint8_t pkt_ind
+@@ -203,8 +205,10 @@ static lgw_context_t lgw_context = {
+ FILE * log_file = NULL;
+ 
+ /* I2C temperature sensor handles */
++#ifdef USE_TEMPERATURE_SENSOR
+ static int     ts_fd = -1;
+ static uint8_t ts_addr = 0xFF;
++#endif
+ 
+ /* I2C AD5338 handles */
+ static int     ad_fd = -1;
+@@ -277,7 +281,7 @@ static int remove_pkt(struct lgw_pkt_rx_s * p, uint8_t * nb_pkt, uint8_t pkt_ind
      CHECK_NULL(p);
      CHECK_NULL(nb_pkt);
      if (pkt_index > ((*nb_pkt) - 1)) {
@@ -296,7 +323,7 @@ index ffc8ec0..60e8387 100644
          return -1;
      }
  
-@@ -390,11 +392,13 @@ static int merge_packets(struct lgw_pkt_rx_s * p, uint8_t * nb_pkt) {
+@@ -390,11 +394,13 @@ static int merge_packets(struct lgw_pkt_rx_s * p, uint8_t * nb_pkt) {
                      }
                  }
                  /* pkt_dup_idx contains the index to be deleted */
@@ -311,7 +338,7 @@ index ffc8ec0..60e8387 100644
                  }
                  dup_restart = true;
                  break;
-@@ -453,13 +457,13 @@ int lgw_board_setconf(struct lgw_conf_board_s * conf) {
+@@ -453,13 +459,13 @@ int lgw_board_setconf(struct lgw_conf_board_s * conf) {
  
      /* check if the concentrator is running */
      if (CONTEXT_STARTED == true) {
@@ -327,7 +354,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -487,7 +491,7 @@ int lgw_rxrf_setconf(uint8_t rf_chain, struct lgw_conf_rxrf_s * conf) {
+@@ -487,7 +493,7 @@ int lgw_rxrf_setconf(uint8_t rf_chain, struct lgw_conf_rxrf_s * conf) {
  
      /* check if the concentrator is running */
      if (CONTEXT_STARTED == true) {
@@ -336,7 +363,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -499,19 +503,19 @@ int lgw_rxrf_setconf(uint8_t rf_chain, struct lgw_conf_rxrf_s * conf) {
+@@ -499,19 +505,19 @@ int lgw_rxrf_setconf(uint8_t rf_chain, struct lgw_conf_rxrf_s * conf) {
  
      /* check input range (segfault prevention) */
      if (rf_chain >= LGW_RF_CHAIN_NB) {
@@ -359,7 +386,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -549,13 +553,13 @@ int lgw_rxif_setconf(uint8_t if_chain, struct lgw_conf_rxif_s * conf) {
+@@ -549,13 +555,13 @@ int lgw_rxif_setconf(uint8_t if_chain, struct lgw_conf_rxif_s * conf) {
  
      /* check if the concentrator is running */
      if (CONTEXT_STARTED == true) {
@@ -375,7 +402,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -569,10 +573,10 @@ int lgw_rxif_setconf(uint8_t if_chain, struct lgw_conf_rxif_s * conf) {
+@@ -569,10 +575,10 @@ int lgw_rxif_setconf(uint8_t if_chain, struct lgw_conf_rxif_s * conf) {
  
      /* check 'general' parameters */
      if (sx1302_get_ifmod_config(if_chain) == IF_UNDEFINED) {
@@ -388,7 +415,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
      /* check if IF frequency is optimal based on channel and radio bandwidths */
-@@ -590,10 +594,10 @@ int lgw_rxif_setconf(uint8_t if_chain, struct lgw_conf_rxif_s * conf) {
+@@ -590,10 +596,10 @@ int lgw_rxif_setconf(uint8_t if_chain, struct lgw_conf_rxif_s * conf) {
      }
      bw_hz = lgw_bw_getval(conf->bandwidth); /* channel bandwidth */
      if ((conf->freq_hz + ((bw_hz==-1)?LGW_REF_BW:bw_hz)/2) > ((int32_t)rf_rx_bandwidth/2)) {
@@ -401,7 +428,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -610,11 +614,11 @@ int lgw_rxif_setconf(uint8_t if_chain, struct lgw_conf_rxif_s * conf) {
+@@ -610,11 +616,11 @@ int lgw_rxif_setconf(uint8_t if_chain, struct lgw_conf_rxif_s * conf) {
              }
              /* check BW & DR */
              if (!IS_LORA_BW(conf->bandwidth)) {
@@ -415,7 +442,7 @@ index ffc8ec0..60e8387 100644
                  return LGW_HAL_ERROR;
              }
              /* set internal configuration  */
-@@ -645,11 +649,11 @@ int lgw_rxif_setconf(uint8_t if_chain, struct lgw_conf_rxif_s * conf) {
+@@ -645,11 +651,11 @@ int lgw_rxif_setconf(uint8_t if_chain, struct lgw_conf_rxif_s * conf) {
              }
              /* check BW & DR */
              if (conf->bandwidth != BW_125KHZ) {
@@ -429,7 +456,7 @@ index ffc8ec0..60e8387 100644
                  return LGW_HAL_ERROR;
              }
              /* set internal configuration  */
-@@ -672,11 +676,11 @@ int lgw_rxif_setconf(uint8_t if_chain, struct lgw_conf_rxif_s * conf) {
+@@ -672,11 +678,11 @@ int lgw_rxif_setconf(uint8_t if_chain, struct lgw_conf_rxif_s * conf) {
              }
              /* check BW & DR */
              if(!IS_FSK_BW(conf->bandwidth)) {
@@ -443,7 +470,7 @@ index ffc8ec0..60e8387 100644
                  return LGW_HAL_ERROR;
              }
              /* set internal configuration  */
-@@ -700,7 +704,7 @@ int lgw_rxif_setconf(uint8_t if_chain, struct lgw_conf_rxif_s * conf) {
+@@ -700,7 +706,7 @@ int lgw_rxif_setconf(uint8_t if_chain, struct lgw_conf_rxif_s * conf) {
              break;
  
          default:
@@ -452,7 +479,7 @@ index ffc8ec0..60e8387 100644
              return LGW_HAL_ERROR;
      }
  
-@@ -726,7 +730,7 @@ int lgw_txgain_setconf(uint8_t rf_chain, struct lgw_tx_gain_lut_s * conf) {
+@@ -726,7 +732,7 @@ int lgw_txgain_setconf(uint8_t rf_chain, struct lgw_tx_gain_lut_s * conf) {
  
      /* Check LUT size */
      if ((conf->size < 1) || (conf->size > TX_GAIN_LUT_SIZE_MAX)) {
@@ -461,7 +488,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -735,23 +739,23 @@ int lgw_txgain_setconf(uint8_t rf_chain, struct lgw_tx_gain_lut_s * conf) {
+@@ -735,23 +741,23 @@ int lgw_txgain_setconf(uint8_t rf_chain, struct lgw_tx_gain_lut_s * conf) {
      for (i = 0; i < CONTEXT_TX_GAIN_LUT[rf_chain].size; i++) {
          /* Check gain range */
          if (conf->lut[i].dig_gain > 3) {
@@ -490,7 +517,7 @@ index ffc8ec0..60e8387 100644
              return LGW_HAL_ERROR;
          }
  
-@@ -802,11 +806,11 @@ int lgw_sx1261_setconf(struct lgw_conf_sx1261_s * conf) {
+@@ -802,11 +808,11 @@ int lgw_sx1261_setconf(struct lgw_conf_sx1261_s * conf) {
      CONTEXT_SX1261.lbt_conf.nb_channel = conf->lbt_conf.nb_channel;
      for (i = 0; i < CONTEXT_SX1261.lbt_conf.nb_channel; i++) {
          if (conf->lbt_conf.channels[i].bandwidth != BW_125KHZ && conf->lbt_conf.channels[i].bandwidth != BW_250KHZ) {
@@ -504,7 +531,7 @@ index ffc8ec0..60e8387 100644
              return LGW_HAL_ERROR;
          }
          CONTEXT_SX1261.lbt_conf.channels[i] = conf->lbt_conf.channels[i];
-@@ -857,21 +861,21 @@ int lgw_start(void) {
+@@ -857,21 +863,21 @@ int lgw_start(void) {
  
      err = lgw_connect(CONTEXT_COM_TYPE, CONTEXT_COM_PATH);
      if (err == LGW_REG_ERROR) {
@@ -529,7 +556,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -881,7 +885,7 @@ int lgw_start(void) {
+@@ -881,7 +887,7 @@ int lgw_start(void) {
              /* Reset the radio */
              err = sx1302_radio_reset(i, CONTEXT_RF_CHAIN[i].type);
              if (err != LGW_REG_SUCCESS) {
@@ -538,7 +565,7 @@ index ffc8ec0..60e8387 100644
                  return LGW_HAL_ERROR;
              }
  
-@@ -895,18 +899,18 @@ int lgw_start(void) {
+@@ -895,18 +901,18 @@ int lgw_start(void) {
                      err = sx125x_setup(i, CONTEXT_BOARD.clksrc, true, CONTEXT_RF_CHAIN[i].type, CONTEXT_RF_CHAIN[i].freq_hz);
                      break;
                  default:
@@ -560,7 +587,7 @@ index ffc8ec0..60e8387 100644
                  return LGW_HAL_ERROR;
              }
          }
-@@ -915,54 +919,54 @@ int lgw_start(void) {
+@@ -915,54 +921,54 @@ int lgw_start(void) {
      /* Select the radio which provides the clock to the sx1302 */
      err = sx1302_radio_clock_select(CONTEXT_BOARD.clksrc);
      if (err != LGW_REG_SUCCESS) {
@@ -623,7 +650,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -970,12 +974,12 @@ int lgw_start(void) {
+@@ -970,12 +976,12 @@ int lgw_start(void) {
      if (CONTEXT_IF_CHAIN[8].enable == true) {
          err = sx1302_lora_service_correlator_configure(&(CONTEXT_LORA_SERVICE));
          if (err != LGW_REG_SUCCESS) {
@@ -638,7 +665,7 @@ index ffc8ec0..60e8387 100644
              return LGW_HAL_ERROR;
          }
      }
-@@ -984,7 +988,7 @@ int lgw_start(void) {
+@@ -984,7 +990,7 @@ int lgw_start(void) {
      if (CONTEXT_IF_CHAIN[9].enable == true) {
          err = sx1302_fsk_configure(&(CONTEXT_FSK));
          if (err != LGW_REG_SUCCESS) {
@@ -647,7 +674,7 @@ index ffc8ec0..60e8387 100644
              return LGW_HAL_ERROR;
          }
      }
-@@ -992,14 +996,14 @@ int lgw_start(void) {
+@@ -992,14 +998,14 @@ int lgw_start(void) {
      /* configure syncword */
      err = sx1302_lora_syncword(CONTEXT_LWAN_PUBLIC, CONTEXT_LORA_SERVICE.datarate);
      if (err != LGW_REG_SUCCESS) {
@@ -664,7 +691,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -1009,7 +1013,7 @@ int lgw_start(void) {
+@@ -1009,7 +1015,7 @@ int lgw_start(void) {
              DEBUG_MSG("Loading AGC fw for sx1250\n");
              err = sx1302_agc_load_firmware(agc_firmware_sx1250);
              if (err != LGW_REG_SUCCESS) {
@@ -673,7 +700,7 @@ index ffc8ec0..60e8387 100644
                  return LGW_HAL_ERROR;
              }
              fw_version_agc = FW_VERSION_AGC_SX1250;
-@@ -1019,18 +1023,18 @@ int lgw_start(void) {
+@@ -1019,18 +1025,18 @@ int lgw_start(void) {
              DEBUG_MSG("Loading AGC fw for sx125x\n");
              err = sx1302_agc_load_firmware(agc_firmware_sx125x);
              if (err != LGW_REG_SUCCESS) {
@@ -695,7 +722,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -1038,26 +1042,26 @@ int lgw_start(void) {
+@@ -1038,26 +1044,26 @@ int lgw_start(void) {
      DEBUG_MSG("Loading ARB fw\n");
      err = sx1302_arb_load_firmware(arb_firmware);
      if (err != LGW_REG_SUCCESS) {
@@ -726,7 +753,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -1075,7 +1079,7 @@ int lgw_start(void) {
+@@ -1075,7 +1081,7 @@ int lgw_start(void) {
      /* Open the file for writting */
      log_file = fopen(CONTEXT_DEBUG.log_file_name, "w+"); /* create log file, overwrite if file already exist */
      if (log_file == NULL) {
@@ -735,7 +762,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      } else {
          printf("INFO: %s file opened for debug log\n", CONTEXT_DEBUG.log_file_name);
-@@ -1084,7 +1088,7 @@ int lgw_start(void) {
+@@ -1084,7 +1090,7 @@ int lgw_start(void) {
          unlink("loragw_hal.log");
          i = symlink(CONTEXT_DEBUG.log_file_name, "loragw_hal.log");
          if (i < 0) {
@@ -744,7 +771,15 @@ index ffc8ec0..60e8387 100644
          }
      }
  #endif
-@@ -1098,22 +1102,22 @@ int lgw_start(void) {
+@@ -1093,41 +1099,46 @@ int lgw_start(void) {
+     dbg_init_random();
+ 
+     if (CONTEXT_COM_TYPE == LGW_COM_SPI) {
++
++#ifdef USE_TEMPERATURE_SENSOR
++
+         /* Find the temperature sensor on the known supported ports */
+         for (i = 0; i < (int)(sizeof I2C_PORT_TEMP_SENSOR); i++) {
              ts_addr = I2C_PORT_TEMP_SENSOR[i];
              err = i2c_linuxdev_open(I2C_DEVICE, ts_addr, &ts_fd);
              if (err != LGW_I2C_SUCCESS) {
@@ -771,7 +806,9 @@ index ffc8ec0..60e8387 100644
              return LGW_HAL_ERROR;
          }
  
-@@ -1121,13 +1125,13 @@ int lgw_start(void) {
++#endif
++
+         /* Configure ADC AD338R for full duplex (CN490 reference design) */
          if (CONTEXT_BOARD.full_duplex == true) {
              err = i2c_linuxdev_open(I2C_DEVICE, I2C_PORT_DAC_AD5338R, &ad_fd);
              if (err != LGW_I2C_SUCCESS) {
@@ -787,7 +824,7 @@ index ffc8ec0..60e8387 100644
                  i2c_linuxdev_close(ad_fd);
                  ad_fd = -1;
                  return LGW_HAL_ERROR;
-@@ -1137,10 +1141,10 @@ int lgw_start(void) {
+@@ -1137,10 +1148,10 @@ int lgw_start(void) {
              uint8_t volt_val[AD5338R_CMD_SIZE] = { 0x39, (uint8_t)VOLTAGE2HEX_H(0), (uint8_t)VOLTAGE2HEX_L(0) };
              err = ad5338r_write(ad_fd, I2C_PORT_DAC_AD5338R, volt_val);
              if (err != LGW_I2C_SUCCESS) {
@@ -800,7 +837,7 @@ index ffc8ec0..60e8387 100644
          }
      }
  
-@@ -1148,25 +1152,25 @@ int lgw_start(void) {
+@@ -1148,25 +1159,25 @@ int lgw_start(void) {
      if (CONTEXT_SX1261.enable == true) {
          err = sx1261_connect(CONTEXT_COM_TYPE, (CONTEXT_COM_TYPE == LGW_COM_SPI) ? CONTEXT_SX1261.spi_path : NULL);
          if (err != LGW_REG_SUCCESS) {
@@ -830,7 +867,7 @@ index ffc8ec0..60e8387 100644
              return LGW_HAL_ERROR;
          }
      }
-@@ -1174,7 +1178,7 @@ int lgw_start(void) {
+@@ -1174,7 +1185,7 @@ int lgw_start(void) {
      /* Set CONFIG_DONE GPIO to 1 (turn on the corresponding LED) */
      err = sx1302_set_gpio(0x01);
      if (err != LGW_REG_SUCCESS) {
@@ -839,7 +876,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -1203,7 +1207,7 @@ int lgw_stop(void) {
+@@ -1203,7 +1214,7 @@ int lgw_stop(void) {
          DEBUG_PRINTF("INFO: aborting TX on chain %u\n", i);
          x = lgw_abort_tx(i);
          if (x != LGW_HAL_SUCCESS) {
@@ -848,7 +885,7 @@ index ffc8ec0..60e8387 100644
              err = LGW_HAL_ERROR;
          }
      }
-@@ -1217,7 +1221,7 @@ int lgw_stop(void) {
+@@ -1217,23 +1228,24 @@ int lgw_stop(void) {
      DEBUG_MSG("INFO: Disconnecting\n");
      x = lgw_disconnect();
      if (x != LGW_HAL_SUCCESS) {
@@ -857,7 +894,8 @@ index ffc8ec0..60e8387 100644
          err = LGW_HAL_ERROR;
      }
  
-@@ -1225,7 +1229,7 @@ int lgw_stop(void) {
+     if (CONTEXT_COM_TYPE == LGW_COM_SPI) {
++#ifdef USE_TEMPERATURE_SENSOR
          DEBUG_MSG("INFO: Closing I2C for temperature sensor\n");
          x = i2c_linuxdev_close(ts_fd);
          if (x != 0) {
@@ -865,8 +903,9 @@ index ffc8ec0..60e8387 100644
 +            ERROR_PRINTF("failed to close I2C temperature sensor device (err=%i)\n", x);
              err = LGW_HAL_ERROR;
          }
- 
-@@ -1233,7 +1237,7 @@ int lgw_stop(void) {
+-
++#endif
+         if (CONTEXT_BOARD.full_duplex == true) {
              DEBUG_MSG("INFO: Closing I2C for AD5338R\n");
              x = i2c_linuxdev_close(ad_fd);
              if (x != 0) {
@@ -875,7 +914,7 @@ index ffc8ec0..60e8387 100644
                  err = LGW_HAL_ERROR;
              }
          }
-@@ -1257,7 +1261,7 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
+@@ -1257,7 +1269,7 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
      /* performances variables */
      struct timeval tm;
  
@@ -884,7 +923,7 @@ index ffc8ec0..60e8387 100644
  
      /* Record function start time */
      _meas_time_start(&tm);
-@@ -1265,7 +1269,7 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
+@@ -1265,7 +1277,7 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
      /* Get packets from SX1302, if any */
      res = sx1302_fetch(&nb_pkt_fetched);
      if (res != LGW_REG_SUCCESS) {
@@ -893,7 +932,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -1283,13 +1287,14 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
+@@ -1283,13 +1295,14 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
      }
      if (nb_pkt_fetched > max_pkt) {
          nb_pkt_left = nb_pkt_fetched - max_pkt;
@@ -910,7 +949,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -1298,10 +1303,10 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
+@@ -1298,10 +1311,10 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
          /* Get packet and move to next one */
          res = sx1302_parse(&lgw_context, &pkt_data[nb_pkt_found]);
          if (res == LGW_REG_WARNING) {
@@ -923,7 +962,7 @@ index ffc8ec0..60e8387 100644
              return LGW_HAL_ERROR;
          }
  
-@@ -1321,7 +1326,7 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
+@@ -1321,7 +1334,7 @@ int lgw_receive(uint8_t max_pkt, struct lgw_pkt_rx_s *pkt_data) {
      if ((nb_pkt_found > 0) && (CONTEXT_FINE_TIMESTAMP.enable == true)) {
          res = merge_packets(pkt_data, &nb_pkt_found);
          if (res != 0) {
@@ -932,7 +971,7 @@ index ffc8ec0..60e8387 100644
          }
  
          DEBUG_PRINTF("INFO: nb pkt found:%u (after de-duplicating)\n", nb_pkt_found);
-@@ -1349,7 +1354,7 @@ int lgw_send(struct lgw_pkt_tx_s * pkt_data) {
+@@ -1349,7 +1362,7 @@ int lgw_send(struct lgw_pkt_tx_s * pkt_data) {
  
      /* check if the concentrator is running */
      if (CONTEXT_STARTED == false) {
@@ -941,7 +980,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -1357,57 +1362,57 @@ int lgw_send(struct lgw_pkt_tx_s * pkt_data) {
+@@ -1357,57 +1370,57 @@ int lgw_send(struct lgw_pkt_tx_s * pkt_data) {
  
      /* check input range (segfault prevention) */
      if (pkt_data->rf_chain >= LGW_RF_CHAIN_NB) {
@@ -1011,7 +1050,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -1416,17 +1421,17 @@ int lgw_send(struct lgw_pkt_tx_s * pkt_data) {
+@@ -1416,17 +1429,17 @@ int lgw_send(struct lgw_pkt_tx_s * pkt_data) {
          uint8_t volt_val[AD5338R_CMD_SIZE] = {0x39, VOLTAGE2HEX_H(2.51), VOLTAGE2HEX_L(2.51)}; /* set to 2.51V */
          err = ad5338r_write(ad_fd, I2C_PORT_DAC_AD5338R, volt_val);
          if (err != LGW_I2C_SUCCESS) {
@@ -1032,7 +1071,7 @@ index ffc8ec0..60e8387 100644
              return LGW_HAL_ERROR;
          }
      }
-@@ -1434,12 +1439,12 @@ int lgw_send(struct lgw_pkt_tx_s * pkt_data) {
+@@ -1434,12 +1447,12 @@ int lgw_send(struct lgw_pkt_tx_s * pkt_data) {
      /* Send the TX request to the concentrator */
      err = sx1302_send(CONTEXT_RF_CHAIN[pkt_data->rf_chain].type, &CONTEXT_TX_GAIN_LUT[pkt_data->rf_chain], CONTEXT_LWAN_PUBLIC, &CONTEXT_FSK, pkt_data);
      if (err != LGW_REG_SUCCESS) {
@@ -1047,7 +1086,7 @@ index ffc8ec0..60e8387 100644
              }
          }
  
-@@ -1452,26 +1457,26 @@ int lgw_send(struct lgw_pkt_tx_s * pkt_data) {
+@@ -1452,26 +1465,26 @@ int lgw_send(struct lgw_pkt_tx_s * pkt_data) {
      if (CONTEXT_SX1261.lbt_conf.enable == true) {
          err = lgw_lbt_tx_status(pkt_data->rf_chain, &lbt_tx_allowed);
          if (err != 0) {
@@ -1080,7 +1119,7 @@ index ffc8ec0..60e8387 100644
              return LGW_HAL_ERROR;
          }
      }
-@@ -1493,7 +1498,7 @@ int lgw_status(uint8_t rf_chain, uint8_t select, uint8_t *code) {
+@@ -1493,7 +1506,7 @@ int lgw_status(uint8_t rf_chain, uint8_t select, uint8_t *code) {
      /* check input variables */
      CHECK_NULL(code);
      if (rf_chain >= LGW_RF_CHAIN_NB) {
@@ -1089,7 +1128,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -1511,7 +1516,7 @@ int lgw_status(uint8_t rf_chain, uint8_t select, uint8_t *code) {
+@@ -1511,7 +1524,7 @@ int lgw_status(uint8_t rf_chain, uint8_t select, uint8_t *code) {
              *code = sx1302_rx_status(rf_chain);
          }
      } else {
@@ -1098,7 +1137,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -1530,7 +1535,7 @@ int lgw_abort_tx(uint8_t rf_chain) {
+@@ -1530,7 +1543,7 @@ int lgw_abort_tx(uint8_t rf_chain) {
  
      /* check input variables */
      if (rf_chain >= LGW_RF_CHAIN_NB) {
@@ -1107,7 +1146,7 @@ index ffc8ec0..60e8387 100644
          return LGW_HAL_ERROR;
      }
  
-@@ -1591,7 +1596,7 @@ int lgw_get_eui(uint64_t* eui) {
+@@ -1591,10 +1604,11 @@ int lgw_get_eui(uint64_t* eui) {
  int lgw_get_temperature(float* temperature) {
      int err = LGW_HAL_ERROR;
  
@@ -1116,7 +1155,11 @@ index ffc8ec0..60e8387 100644
  
      CHECK_NULL(temperature);
  
-@@ -1603,11 +1608,11 @@ int lgw_get_temperature(float* temperature) {
++#ifdef USE_TEMPERATURE_SENSOR
+     switch (CONTEXT_COM_TYPE) {
+         case LGW_COM_SPI:
+             err = stts751_get_temperature(ts_fd, ts_addr, temperature);
+@@ -1603,11 +1617,15 @@ int lgw_get_temperature(float* temperature) {
              err = lgw_com_get_temperature(temperature);
              break;
          default:
@@ -1124,13 +1167,17 @@ index ffc8ec0..60e8387 100644
 +            ERROR_PRINTF("wrong communication type (SHOULD NOT HAPPEN)\n");
              break;
      }
++#else
++    *temperature = 30.0;
++    err = LGW_HAL_SUCCESS;
++#endif
  
 -    DEBUG_PRINTF(" --- %s\n", "OUT");
 +    // DEBUG_PRINTF(" --- %s\n", "OUT");
  
      return err;
  }
-@@ -1627,7 +1632,7 @@ uint32_t lgw_time_on_air(const struct lgw_pkt_tx_s *packet) {
+@@ -1627,7 +1645,7 @@ uint32_t lgw_time_on_air(const struct lgw_pkt_tx_s *packet) {
      DEBUG_PRINTF(" --- %s\n", "IN");
  
      if (packet == NULL) {
@@ -1139,7 +1186,7 @@ index ffc8ec0..60e8387 100644
          return 0;
      }
  
-@@ -1649,7 +1654,7 @@ uint32_t lgw_time_on_air(const struct lgw_pkt_tx_s *packet) {
+@@ -1649,7 +1667,7 @@ uint32_t lgw_time_on_air(const struct lgw_pkt_tx_s *packet) {
          toa_ms = (uint32_t)t_fsk + 1; /* add margin for rounding */
      } else {
          toa_ms = 0;
@@ -1148,7 +1195,7 @@ index ffc8ec0..60e8387 100644
      }
  
      DEBUG_PRINTF(" --- %s\n", "OUT");
-@@ -1663,19 +1668,19 @@ int lgw_spectral_scan_start(uint32_t freq_hz, uint16_t nb_scan) {
+@@ -1663,19 +1681,19 @@ int lgw_spectral_scan_start(uint32_t freq_hz, uint16_t nb_scan) {
      int err;
  
      if (CONTEXT_SX1261.enable != true) {
@@ -1206,7 +1253,7 @@ index e298c42..b585fe4 100644
  /* --- PRIVATE FUNCTIONS DEFINITION ----------------------------------------- */
  
 diff --git a/libloragw/src/loragw_mcu.c b/libloragw/src/loragw_mcu.c
-index 4644df8..1d05002 100644
+index 4644df8..82cbaac 100644
 --- a/libloragw/src/loragw_mcu.c
 +++ b/libloragw/src/loragw_mcu.c
 @@ -44,6 +44,8 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
@@ -1218,7 +1265,16 @@ index 4644df8..1d05002 100644
  /* -------------------------------------------------------------------------- */
  /* --- PRIVATE CONSTANTS ---------------------------------------------------- */
  
-@@ -235,8 +237,8 @@ int write_req(int fd, order_id_t cmd, const uint8_t * payload, uint16_t payload_
+@@ -73,6 +75,8 @@ static spi_req_bulk_t spi_bulk_buffer = {
+     .buffer = { 0 }
+ };
+ 
++static char mcu_version[9];
++
+ /* -------------------------------------------------------------------------- */
+ /* --- PRIVATE FUNCTIONS DEFINITION ----------------------------------------- */
+ 
+@@ -235,8 +239,8 @@ int write_req(int fd, order_id_t cmd, const uint8_t * payload, uint16_t payload_
  
  #if DEBUG_MCU == 1
      gettimeofday(&write_tv, NULL);
@@ -1228,7 +1284,7 @@ index 4644df8..1d05002 100644
  
  #if DEBUG_VERBOSE
      int i;
-@@ -285,8 +287,8 @@ int read_ack(int fd, uint8_t * hdr, uint8_t * buf, size_t buf_size) {
+@@ -285,8 +289,8 @@ int read_ack(int fd, uint8_t * hdr, uint8_t * buf, size_t buf_size) {
      } else {
  #if DEBUG_MCU == 1
          gettimeofday(&read_tv, NULL);
@@ -1238,7 +1294,7 @@ index 4644df8..1d05002 100644
      }
  
      /* Compute time spent in this function */
-@@ -331,8 +333,8 @@ int read_ack(int fd, uint8_t * hdr, uint8_t * buf, size_t buf_size) {
+@@ -331,8 +335,8 @@ int read_ack(int fd, uint8_t * hdr, uint8_t * buf, size_t buf_size) {
              } else {
  #if DEBUG_MCU == 1
                  gettimeofday(&read_tv, NULL);
@@ -1248,6 +1304,47 @@ index 4644df8..1d05002 100644
                  nb_read += n;
              }
          } while (nb_read < (int)size); /* we want to read only the expected payload, not more */
+@@ -483,8 +487,13 @@ int decode_ack_spi_bulk(const uint8_t * hdr, const uint8_t * payload) {
+         return -1;
+     }
+ 
+-    if (cmd_get_type(hdr) != ORDER_ID__ACK_MULTIPLE_SPI) {
+-        printf("ERROR: wrong ACK type for ACK_MULTIPLE_SPI (expected:0x%02X, got 0x%02X)\n", ORDER_ID__ACK_MULTIPLE_SPI, cmd_get_type(hdr));
++    order_id_t command = ORDER_ID__ACK_MULTIPLE_SPI;
++
++    // ORDER_ID__ACK_MULTIPLE_SPI in firmware versions prior to 1.0.0 was 0x46 instead of 0x45
++    if (strcmp(mcu_version, mcu_version_string) < 0) command = command + 1;
++
++    if (cmd_get_type(hdr) != command) {
++        printf("ERROR: wrong ACK type for ACK_MULTIPLE_SPI (expected:0x%02X, got 0x%02X)\n", command, cmd_get_type(hdr));
+         return -1;
+     }
+ 
+@@ -610,6 +619,10 @@ int mcu_get_status(int fd, s_status * status) {
+     return 0;
+ }
+ 
++void mcu_save_version(char * version) {
++    strcpy(mcu_version, version);
++}
++
+ /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
+ 
+ int mcu_gpio_write(int fd, uint8_t gpio_port, uint8_t gpio_id, uint8_t gpio_value) {
+@@ -649,7 +662,12 @@ int mcu_spi_write(int fd, uint8_t * in_out_buf, size_t buf_size) {
+     /* Check input parameters */
+     CHECK_NULL(in_out_buf);
+ 
+-    if (write_req(fd, ORDER_ID__REQ_MULTIPLE_SPI, in_out_buf, buf_size) != 0) {
++    order_id_t command = ORDER_ID__REQ_MULTIPLE_SPI;
++
++    // ORDER_ID__REQ_MULTIPLE_SPI in firmware versions prior to 1.0.0 was 0x06 instead of 0x05
++    if (strcmp(mcu_version, mcu_version_string) < 0) command = command + 1;
++
++    if (write_req(fd, command, in_out_buf, buf_size) != 0) {
+         printf("ERROR: failed to write REQ_MULTIPLE_SPI request\n");
+         return -1;
+     }
 diff --git a/libloragw/src/loragw_reg.c b/libloragw/src/loragw_reg.c
 index 6a7d0df..8019654 100644
 --- a/libloragw/src/loragw_reg.c
@@ -2560,7 +2657,7 @@ index effeaa0..40c3144 100644
      }
  
 diff --git a/libloragw/src/loragw_usb.c b/libloragw/src/loragw_usb.c
-index 4fe7e9a..b69f73c 100644
+index 4fe7e9a..019b5e8 100644
 --- a/libloragw/src/loragw_usb.c
 +++ b/libloragw/src/loragw_usb.c
 @@ -47,6 +47,8 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
@@ -2653,7 +2750,7 @@ index 4fe7e9a..b69f73c 100644
              free(usb_device);
              return LGW_USB_ERROR;
          }
-@@ -187,25 +189,25 @@ int lgw_usb_open(const char * com_path, void **com_target_ptr) {
+@@ -187,25 +189,26 @@ int lgw_usb_open(const char * com_path, void **com_target_ptr) {
          *com_target_ptr = (void*)usb_device;
  
          /* Initialize pseudo-random generator for MCU request ID */
@@ -2668,6 +2765,7 @@ index 4fe7e9a..b69f73c 100644
 +            ERROR_PRINTF("failed to ping the concentrator MCU\n");
              return LGW_USB_ERROR;
          }
++        mcu_save_version(gw_info.version + 1);
          if (strncmp(gw_info.version + 1, mcu_version_string, sizeof mcu_version_string) != 0) {
              printf("WARNING: MCU version mismatch (expected:%s, got:%s)\n", mcu_version_string, gw_info.version);
          }
@@ -2685,7 +2783,7 @@ index 4fe7e9a..b69f73c 100644
  
          /* Reset SX1302 */
          x  = mcu_gpio_write(fd, 0, 1, 1); /*   set PA1 : POWER_EN */
-@@ -215,7 +217,7 @@ int lgw_usb_open(const char * com_path, void **com_target_ptr) {
+@@ -215,7 +218,7 @@ int lgw_usb_open(const char * com_path, void **com_target_ptr) {
          x |= mcu_gpio_write(fd, 0, 8, 0); /*   set PA8 : SX1261_NRESET active */
          x |= mcu_gpio_write(fd, 0, 8, 1); /* unset PA8 : SX1261_NRESET inactive */
          if (x != 0) {
@@ -2694,7 +2792,7 @@ index 4fe7e9a..b69f73c 100644
              free(usb_device);
              return LGW_USB_ERROR;
          }
-@@ -247,7 +249,7 @@ int lgw_usb_close(void *com_target) {
+@@ -247,7 +250,7 @@ int lgw_usb_close(void *com_target) {
      x |= mcu_gpio_write(usb_device, 0, 8, 0); /*   set PA8 : SX1261_NRESET active */
      x |= mcu_gpio_write(usb_device, 0, 8, 1); /* unset PA8 : SX1261_NRESET inactive */
      if (x != 0) {
@@ -2703,7 +2801,7 @@ index 4fe7e9a..b69f73c 100644
          err = LGW_USB_ERROR;
      }
  
-@@ -255,16 +257,16 @@ int lgw_usb_close(void *com_target) {
+@@ -255,16 +258,16 @@ int lgw_usb_close(void *com_target) {
      x = close(usb_device);
      free(com_target);
      if (x != 0) {
@@ -2723,7 +2821,7 @@ index 4fe7e9a..b69f73c 100644
          return LGW_USB_SUCCESS;
      }
  }
-@@ -316,10 +318,10 @@ int lgw_usb_rmw(void *com_target, uint16_t address, uint8_t offs, uint8_t leng,
+@@ -316,10 +319,10 @@ int lgw_usb_rmw(void *com_target, uint16_t address, uint8_t offs, uint8_t leng,
  
      /* determine return code */
      if (a != 0) {
@@ -2736,7 +2834,7 @@ index 4fe7e9a..b69f73c 100644
          return 0;
      }
  }
-@@ -364,10 +366,10 @@ int lgw_usb_wb(void *com_target, uint8_t spi_mux_target, uint16_t address, const
+@@ -364,10 +367,10 @@ int lgw_usb_wb(void *com_target, uint8_t spi_mux_target, uint16_t address, const
  
      /* determine return code */
      if (a != 0) {
@@ -2749,7 +2847,7 @@ index 4fe7e9a..b69f73c 100644
          return 0;
      }
  }
-@@ -406,7 +408,7 @@ int lgw_usb_rb(void *com_target, uint8_t spi_mux_target, uint16_t address, uint8
+@@ -406,7 +409,7 @@ int lgw_usb_rb(void *com_target, uint8_t spi_mux_target, uint16_t address, uint8
  
      if (_lgw_write_mode == LGW_COM_WRITE_MODE_BULK) {
          /* makes no sense to read in bulk mode, as we can't get the result */
@@ -2758,7 +2856,7 @@ index 4fe7e9a..b69f73c 100644
          return -1;
      } else {
          a = mcu_spi_write(usb_device, in_out_buf, command_size);
-@@ -414,10 +416,10 @@ int lgw_usb_rb(void *com_target, uint8_t spi_mux_target, uint16_t address, uint8
+@@ -414,10 +417,10 @@ int lgw_usb_rb(void *com_target, uint8_t spi_mux_target, uint16_t address, uint8
  
      /* determine return code */
      if (a != 0) {
@@ -2771,7 +2869,7 @@ index 4fe7e9a..b69f73c 100644
          memcpy(data, in_out_buf + 9, size); /* remove the first bytes, keep only the payload */
          return 0;
      }
-@@ -427,11 +429,11 @@ int lgw_usb_rb(void *com_target, uint8_t spi_mux_target, uint16_t address, uint8
+@@ -427,11 +430,11 @@ int lgw_usb_rb(void *com_target, uint8_t spi_mux_target, uint16_t address, uint8
  
  int lgw_usb_set_write_mode(lgw_com_write_mode_t write_mode) {
      if (write_mode >= LGW_COM_WRITE_MODE_UNKNOWN) {
@@ -2785,7 +2883,7 @@ index 4fe7e9a..b69f73c 100644
  
      _lgw_write_mode = write_mode;
  
-@@ -447,7 +449,7 @@ int lgw_usb_flush(void *com_target) {
+@@ -447,7 +450,7 @@ int lgw_usb_flush(void *com_target) {
      /* Check input parameters */
      CHECK_NULL(com_target);
      if (_lgw_write_mode != LGW_COM_WRITE_MODE_BULK) {
@@ -2794,7 +2892,7 @@ index 4fe7e9a..b69f73c 100644
          return -1;
      }
  
-@@ -455,7 +457,7 @@ int lgw_usb_flush(void *com_target) {
+@@ -455,7 +458,7 @@ int lgw_usb_flush(void *com_target) {
      _lgw_write_mode = LGW_COM_WRITE_MODE_SINGLE;
  
      if (_lgw_spi_req_nb == 0) {
@@ -2803,7 +2901,7 @@ index 4fe7e9a..b69f73c 100644
          return 0;
      }
  
-@@ -464,7 +466,7 @@ int lgw_usb_flush(void *com_target) {
+@@ -464,7 +467,7 @@ int lgw_usb_flush(void *com_target) {
      DEBUG_MSG("INFO: flushing USB write buffer\n");
      a = mcu_spi_flush(usb_device);
      if (a != 0) {
@@ -2812,7 +2910,7 @@ index 4fe7e9a..b69f73c 100644
      }
  
      /* reset the pending request number */
-@@ -492,10 +494,10 @@ int lgw_usb_get_temperature(void *com_target, float * temperature) {
+@@ -492,10 +495,10 @@ int lgw_usb_get_temperature(void *com_target, float * temperature) {
      usb_device = *(int *)com_target;
  
      if (mcu_get_status(usb_device, &mcu_status) != 0) {
diff --git a/deps/smtcpico/V0.2.2-linuxpico.patch b/deps/smtcpico/V0.2.2-linuxpico.patch
index fd4ca5a..a4bd19c 100644
--- a/deps/smtcpico/V0.2.2-linuxpico.patch
+++ b/deps/smtcpico/V0.2.2-linuxpico.patch
@@ -313,6 +313,19 @@ index 0000000..aa04060
 +
 +#endif
 +/* --- EOF ------------------------------------------------------------------ */
+diff --git a/libloragw/inc/loragw_mcu.h b/libloragw/inc/loragw_mcu.h
+index 938d886..42004dd 100644
+--- a/libloragw/inc/loragw_mcu.h
++++ b/libloragw/inc/loragw_mcu.h
+@@ -30,7 +30,7 @@ License: Revised BSD License, see LICENSE.TXT file include in the project
+ #define LGW_MCU_SUCCESS 0
+ #define LGW_MCU_ERROR   -1
+ 
+-#define STM32FWVERSION 0x010a0006 /* increment LSB for new version */
++#define STM32FWVERSION 0x010a0004 /* increment LSB for new version */
+ 
+ #define MCU_DELAY_COM_INIT 1000
+ #define MCU_DELAY_RESET 200
 diff --git a/libloragw/inc/loragw_stationlog.h b/libloragw/inc/loragw_stationlog.h
 new file mode 100644
 index 0000000..a282b8f
diff --git a/setup.gmk b/setup.gmk
index d7c4363..55d74c1 100644
--- a/setup.gmk
+++ b/setup.gmk
@@ -35,18 +35,31 @@ NQ = $(if ${V},>/dev/null,)
 
 platform ?= linux
 variant  ?= std
+arch     ?= default
 
 -include ${TD}/setup-${platform}.gmk
 
 LOCAL_ARCH := $(shell gcc -dumpmachine)
 
-ARCH.linux   = x86_64-linux-gnu
-ARCH.linuxV2 = x86_64-linux-gnu
-ARCH.linuxpico = x86_64-linux-gnu
-ARCH.corecell  = arm-linux-gnueabihf
-ARCH.rpi     = arm-linux-gnueabihf
-ARCH.kerlink = arm-klk-linux-gnueabi
-ARCH=${ARCH.${platform}}
+ARCH.linux.default   = x86_64-linux-gnu
+ARCH.linuxV2.default = x86_64-linux-gnu
+ARCH.linuxpico.default = x86_64-linux-gnu
+ARCH.linuxpico.armv6l = arm-linux-gnueabi
+ARCH.linuxpico.armv7hf = arm-linux-gnueabihf
+ARCH.linuxpico.aarch64 = aarch64-linux-gnu
+ARCH.linuxpico.amd64 = x86_64-linux-gnu
+ARCH.corecell.default  = arm-linux-gnueabihf
+ARCH.corecell.armv6l  = arm-linux-gnueabi
+ARCH.corecell.armv7hf  = arm-linux-gnueabihf
+ARCH.corecell.aarch64  = aarch64-linux-gnu
+ARCH.corecell.amd64  = x86_64-linux-gnu
+ARCH.rpi.default  = arm-linux-gnueabihf
+ARCH.rpi.armv6l  = arm-linux-gnueabi
+ARCH.rpi.armv7hf  = arm-linux-gnueabihf
+ARCH.rpi.aarch64  = aarch64-linux-gnu
+ARCH.rpi.amd64  = x86_64-linux-gnu
+ARCH.kerlink.default = arm-klk-linux-gnueabi
+ARCH=${ARCH.${platform}.${arch}}
 
 export TDfull := $(shell cd ${TD} && pwd)
 TOOLCHAIN=${HOME}/toolchain-${platform}
diff --git a/src-linux/sys_linux.c b/src-linux/sys_linux.c
index 2bbb7e5..2769f86 100644
--- a/src-linux/sys_linux.c
+++ b/src-linux/sys_linux.c
@@ -61,7 +61,11 @@ extern void setupConfigFilenames ();
 extern int checkUris ();
 extern void checkRollForward ();
 
-
+#define WHITELIST_SIZE  16
+extern u4_t static_netids[WHITELIST_SIZE];
+extern u1_t static_netids_count;
+extern u4_t static_ouis[WHITELIST_SIZE];
+extern u1_t static_ouis_count;
 
 #if defined(CFG_ral_master_slave)
 static const char* const SLAVE_ENVS[] = {
@@ -792,6 +796,22 @@ static int parseStationConf () {
                     setWebDir(uj_str(&D), filename);
                     break;
                 }
+                case J_whitelist_netids: {
+                    uj_enterArray(&D);
+                    while( uj_nextSlot(&D) >= 0 ) {
+                        static_netids[static_netids_count++] = ((int) strtol(uj_str(&D), NULL, 0)) & 0x00FFFFFF;
+                    }
+                    uj_exitArray(&D);
+                    break;
+                }
+                case J_whitelist_ouis: {
+                    uj_enterArray(&D);
+                    while( uj_nextSlot(&D) >= 0 ) {
+                        static_ouis[static_ouis_count++] = ((int) strtol(uj_str(&D), NULL, 0)) & 0x00FFFFFF;
+                    }
+                    uj_exitArray(&D);
+                    break;
+                }
                 default: {
                     dbuf_t b = uj_skipValue(&D);
                     int err = s2conf_set(filename, D.field.name, rt_strdupn(b.buf, b.bufsize));
diff --git a/src/kwcrc.h b/src/kwcrc.h
index 033281d..3509ce9 100644
--- a/src/kwcrc.h
+++ b/src/kwcrc.h
@@ -240,3 +240,5 @@
 #define J_wifi_ssid            ((ujcrc_t)(0xE60F391C))
 #define J_wifi_pass            ((ujcrc_t)(0xE13C3600))
 #define J_cups_uri             ((ujcrc_t)(0x594AB0B8))
+#define J_whitelist_netids     ((ujcrc_t)(0x71028769))
+#define J_whitelist_ouis       ((ujcrc_t)(0xCA7848FB))
diff --git a/src/kwlist.txt b/src/kwlist.txt
index 7516d92..3cab9f1 100644
--- a/src/kwlist.txt
+++ b/src/kwlist.txt
@@ -247,3 +247,5 @@ wifi_scan
 wifi_ssid
 wifi_pass
 cups_uri
+whitelist_netids
+whitelist_ouis
diff --git a/src/lora.c b/src/lora.c
index 4d63baa..6c5c72e 100644
--- a/src/lora.c
+++ b/src/lora.c
@@ -82,6 +82,26 @@
 uL_t* s2e_joineuiFilter;
 u4_t  s2e_netidFilter[4] = { 0xffFFffFF, 0xffFFffFF, 0xffFFffFF, 0xffFFffFF };
 
+#define WHITELIST_SIZE  16
+u4_t static_netids[WHITELIST_SIZE] = {0};
+u1_t static_netids_count = 0;
+u4_t static_ouis[WHITELIST_SIZE] = {0};
+u1_t static_ouis_count = 0;
+
+static u4_t get_netid(u4_t devaddr) {
+
+    uint8_t nwkid_bits_array[] = { 6, 6, 9, 11, 12, 13, 15, 17 };
+    uint8_t type_id = __builtin_clz(~devaddr);
+    if (type_id > 7) return 0;
+
+    uint8_t nwkid_bits = nwkid_bits_array[type_id];
+    uint32_t nwkid = devaddr >> (31 - type_id - nwkid_bits);
+    nwkid &= ((1 << nwkid_bits) - 1);
+
+    return (type_id << 21) | nwkid;
+
+}
+
 
 int s2e_parse_lora_frame (ujbuf_t* buf, const u1_t* frame , int len, dbuf_t* lbuf) {
     if( len == 0 ) {
@@ -108,6 +128,7 @@ int s2e_parse_lora_frame (ujbuf_t* buf, const u1_t* frame , int len, dbuf_t* lbu
         if( len != OFF_jreq_len)
             goto badframe;
         uL_t joineui = rt_rlsbf8(&frame[OFF_joineui]);
+        uL_t  deveui = rt_rlsbf8(&frame[OFF_deveui]);
         
         if( s2e_joineuiFilter[0] != 0 ) {
             uL_t* f = s2e_joineuiFilter-2;
@@ -120,9 +141,25 @@ int s2e_parse_lora_frame (ujbuf_t* buf, const u1_t* frame , int len, dbuf_t* lbu
             return 0;
           out1:;
         }
+
+        /* Filter by statically defined OUIs */
+        if (static_ouis_count > 0) {
+
+            for (u1_t i=0; i<static_ouis_count; i++) {
+                if ((deveui >> 40) == static_ouis[i]) {
+                    goto out2;
+                }
+            }
+            
+            xprintf(lbuf, "DevEUI %E filtered (not in static whitelist)", deveui);
+            return 0;
+            
+            out2:;
+        
+        }
+
         str_t msgtype = (ftype == FRMTYPE_JREQ ? "jreq" : "rejoin");
         u1_t  mhdr = frame[OFF_mhdr];
-        uL_t  deveui = rt_rlsbf8(&frame[OFF_deveui]);
         u2_t  devnonce = rt_rlsbf2(&frame[OFF_devnonce]);
         s4_t  mic = (s4_t)rt_rlsbf4(&frame[len-4]);
         uj_encKVn(buf,
@@ -148,6 +185,24 @@ int s2e_parse_lora_frame (ujbuf_t* buf, const u1_t* frame , int len, dbuf_t* lbu
         xprintf(lbuf, "DevAddr=%X with NetID=%d filtered", devaddr, netid);
         return 0;
     }
+    
+    /* Filter by statically defined NetIDs */
+    if (static_netids_count > 0) {
+        
+        u4_t netid = get_netid(devaddr);
+        for (u1_t i=0; i<static_netids_count; i++) {
+            if (netid == static_netids[i]) {
+                goto out3;
+            }
+        }
+        
+        xprintf(lbuf, "DevAddr=%08X with NetID=0x%06X filtered (not in static whitelist)", devaddr, netid);
+        return 0;
+        
+        out3:;
+    
+    }
+
     u1_t  mhdr  = frame[OFF_mhdr];
     u1_t  fctrl = frame[OFF_fctrl];
     u2_t  fcnt  = rt_rlsbf2(&frame[OFF_fcnt]);
diff --git a/src/s2e.c b/src/s2e.c
index 6a9c009..22a68a3 100644
--- a/src/s2e.c
+++ b/src/s2e.c
@@ -162,6 +162,7 @@ void s2e_flushRxjobs (s2ctx_t* s2ctx) {
         uj_encOpen(&sendbuf, '{');
         if( !s2e_parse_lora_frame(&sendbuf, &s2ctx->rxq.rxdata[j->off], j->len, lbuf.buf ? &lbuf : NULL) ) {
             // Frame failed sanity checks or stopped by filters
+            if( lbuf.buf ) log_specialFlush(lbuf.pos);
             sendbuf.pos = 0;
             continue;
         }
@@ -1791,7 +1792,7 @@ int s2e_onMsg (s2ctx_t* s2ctx, char* json, ujoff_t jsonlen) {
         LOG(MOD_S2E|ERROR, "Parsing of JSON message failed - ignored");
         return 1;   // return fail? would trigger a reconnect
     }
-    if( s2ctx->region == 0 && (msgtype == J_dnmsg || msgtype == J_dnsched || msgtype == J_dnframe) ) {
+    if( s2ctx->txpow == 0 && (msgtype == J_dnmsg || msgtype == J_dnsched || msgtype == J_dnframe) ) {
         // Might happen if messages are still queued
         LOG(MOD_S2E|WARNING, "Received '%.*s' before 'router_config' - dropped", D.str.len, D.str.beg);
         return 1;
